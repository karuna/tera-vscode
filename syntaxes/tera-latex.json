{
  "name": "tera-latex",
  "scopeName": "text.latex.tera",
  "comment": "Tera Latex Templates",
  "firstLineMatch": "^(\\(\\(\\* extends [\"'][^\"']+[\"'] \\*\\)\\)",
  "foldingStartMarker": "(\\(\\(\\*\\s*(block|filter|for|if|macro|raw))",
  "foldingStopMarker": "(\\(\\(\\*\\s*(endblock|endfilter|endfor|endif|endmacro|endraw)\\s*\\*\\)\\))",
  "patterns": [
    {
      "include": "text.tex.latex"
    },
    {
      "begin": "(\\(\\(\\*)\\s*(raw)\\s*(\\*\\)\\))",
      "captures": {
        "1": {
          "name": "entity.other.tera.delimiter.tag"
        },
        "2": {
          "name": "keyword.control.tera"
        },
        "3": {
          "name": "entity.other.tera.delimiter.tag"
        }
      },
      "end": "(\\(\\(\\*)\\s*(endraw)\\s*(\\*\\)\\))",
      "name": "comment.block.tera.raw"
    },
    {
      "begin": "\\(\\(#-?",
      "captures": [
        {
          "name": "entity.other.tera.delimiter.comment"
        }
      ],
      "end": "-?#\\)\\)",
      "name": "comment.block.tera"
    },
    {
      "begin": "\\(\\(\\(-?",
      "captures": [
        {
          "name": "variable.entity.other.tera.delimiter"
        }
      ],
      "end": "-?\\)\\)\\)",
      "name": "variable.meta.scope.tera",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    {
      "begin": "\\(\\(\\*-?",
      "captures": [
        {
          "name": "entity.other.tera.delimiter.tag"
        }
      ],
      "end": "-?\\*\\)\\)",
      "name": "meta.scope.tera.tag",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    }
  ],
  "repository": {
    "escaped_char": {
      "match": "\\\\x[0-9A-F]{2}",
      "name": "constant.character.escape.hex.tera"
    },
    "escaped_unicode_char": {
      "captures": {
        "1": {
          "name": "constant.character.escape.unicode.16-bit-hex.tera"
        },
        "2": {
          "name": "constant.character.escape.unicode.32-bit-hex.tera"
        },
        "3": {
          "name": "constant.character.escape.unicode.name.tera"
        }
      },
      "match": "(\\\\U[0-9A-Fa-f]{8})|(\\\\u[0-9A-Fa-f]{4})|(\\\\N\\{[a-zA-Z ]+\\})"
    },
    "expression": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "keyword.control.tera"
            },
            "2": {
              "name": "variable.other.tera.block"
            }
          },
          "match": "\\s*\\b(block)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.tera"
            },
            "2": {
              "name": "variable.other.tera.filter"
            }
          },
          "match": "\\s*\\b(filter)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.tera"
            },
            "2": {
              "name": "variable.other.tera.test"
            }
          },
          "match": "\\s*\\b(is)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.tera"
            }
          },
          "match": "(?<=\\(\\(\\%-|\\(\\(\\%)\\s*\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*[,=])"
        },
        {
          "match": "\\b(and|else|if|in|import|not|or|recursive|with(out)?\\s+context)\\b",
          "name": "keyword.control.tera"
        },
        {
          "match": "\\b(true|false|none)\\b",
          "name": "constant.language.tera"
        },
        {
          "match": "\\b(loop|super|self|varargs|kwargs)\\b",
          "name": "variable.language.tera"
        },
        {
          "match": "[a-zA-Z_][a-zA-Z0-9_]*",
          "name": "variable.other.tera"
        },
        {
          "match": "(\\+|\\-|\\*\\*|\\*|//|/|%)",
          "name": "keyword.operator.arithmetic.tera"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.other.tera"
            },
            "2": {
              "name": "variable.other.tera.filter"
            }
          },
          "match": "(\\|)([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.other.tera"
            },
            "2": {
              "name": "variable.other.tera.attribute"
            }
          },
          "match": "(\\.)([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "begin": "\\[",
          "captures": [
            {
              "name": "punctuation.other.tera"
            }
          ],
          "end": "\\]",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "\\(",
          "captures": [
            {
              "name": "punctuation.other.tera"
            }
          ],
          "end": "\\)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "\\(\\(",
          "captures": [
            {
              "name": "punctuation.other.tera"
            }
          ],
          "end": "\\)\\)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "match": "(\\.|:|\\||,)",
          "name": "punctuation.other.tera"
        },
        {
          "match": "(==|<=|=>|<|>|!=)",
          "name": "keyword.operator.comparison.tera"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.tera"
        },
        {
          "begin": "\"",
          "beginCaptures": [
            {
              "name": "punctuation.definition.string.begin.tera"
            }
          ],
          "end": "\"",
          "endCaptures": [
            {
              "name": "punctuation.definition.string.end.tera"
            }
          ],
          "name": "string.quoted.double.tera",
          "patterns": [
            {
              "include": "#string"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": [
            {
              "name": "punctuation.definition.string.begin.tera"
            }
          ],
          "end": "'",
          "endCaptures": [
            {
              "name": "punctuation.definition.string.end.tera"
            }
          ],
          "name": "string.quoted.single.tera",
          "patterns": [
            {
              "include": "#string"
            }
          ]
        },
        {
          "begin": "@/",
          "beginCaptures": [
            {
              "name": "punctuation.definition.regexp.begin.tera"
            }
          ],
          "end": "/",
          "endCaptures": [
            {
              "name": "punctuation.definition.regexp.end.tera"
            }
          ],
          "name": "string.regexp.tera",
          "patterns": [
            {
              "include": "#simple_escapes"
            }
          ]
        }
      ]
    },
    "simple_escapes": {
      "captures": {
        "1": {
          "name": "constant.character.escape.newline.tera"
        },
        "10": {
          "name": "constant.character.escape.tab.tera"
        },
        "11": {
          "name": "constant.character.escape.vertical-tab.tera"
        },
        "2": {
          "name": "constant.character.escape.backlash.tera"
        },
        "3": {
          "name": "constant.character.escape.double-quote.tera"
        },
        "4": {
          "name": "constant.character.escape.single-quote.tera"
        },
        "5": {
          "name": "constant.character.escape.bell.tera"
        },
        "6": {
          "name": "constant.character.escape.backspace.tera"
        },
        "7": {
          "name": "constant.character.escape.formfeed.tera"
        },
        "8": {
          "name": "constant.character.escape.linefeed.tera"
        },
        "9": {
          "name": "constant.character.escape.return.tera"
        }
      },
      "match": "(\\\\\\n)|(\\\\\\\\)|(\\\\\\\")|(\\\\')|(\\\\a)|(\\\\b)|(\\\\f)|(\\\\n)|(\\\\r)|(\\\\t)|(\\\\v)"
    },
    "string": {
      "patterns": [
        {
          "include": "#simple_escapes"
        },
        {
          "include": "#escaped_char"
        },
        {
          "include": "#escaped_unicode_char"
        }
      ]
    }
  }
}
